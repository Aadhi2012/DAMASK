!--------------------------------------------------------------------------------------------------
!> @author Pratheek Shanthraj, Max-Planck-Institut fÃ¼r Eisenforschung GmbH
!> @brief material subroutine incorporating kinematics resulting from thermal expansion
!> @details to be done
!--------------------------------------------------------------------------------------------------
module kinematics_thermal_expansion
 use prec, only: &
   pReal, &
   pInt

 implicit none
 private
<<<<<<< HEAD
 
 !type, private :: tParameters
 !  real(pReal), allocatable, dimension(:) :: &
 !end type tParameters
 
=======
 integer(pInt),                       dimension(:),           allocatable,         public, protected :: &
   kinematics_thermal_expansion_sizePostResults, &                                                                !< cumulative size of post results
   kinematics_thermal_expansion_offset, &                                                                         !< which kinematics is my current damage mechanism?
   kinematics_thermal_expansion_instance                                                                          !< instance of damage kinematics mechanism

 integer(pInt),                       dimension(:,:),         allocatable, target, public  :: &
   kinematics_thermal_expansion_sizePostResult                                                                    !< size of each post result output

 character(len=64),                   dimension(:,:),         allocatable, target, public  :: &
   kinematics_thermal_expansion_output                                                                            !< name of each post result output
   
 integer(pInt),                       dimension(:),           allocatable, target, public  :: &
   kinematics_thermal_expansion_Noutput                                                                           !< number of outputs per instance of this damage 

 enum, bind(c)                                                                                                   ! ToDo kinematics need state machinery to deal with sizePostResult
   enumerator :: undefined_ID, &                                                                                 ! possible remedy is to decouple having state vars from having output
                 thermalexpansionrate_ID                                                                         ! which means to separate user-defined types tState + tOutput...
 end enum
>>>>>>> development
 public :: &
   kinematics_thermal_expansion_init, &
   kinematics_thermal_expansion_initialStrain, &
   kinematics_thermal_expansion_LiAndItsTangent

contains


!--------------------------------------------------------------------------------------------------
!> @brief module initialization
!> @details reads in material parameters, allocates arrays, and does sanity checks
!--------------------------------------------------------------------------------------------------
subroutine kinematics_thermal_expansion_init()
#if defined(__GFORTRAN__) || __INTEL_COMPILER >= 1800
 use, intrinsic :: iso_fortran_env, only: &
   compiler_version, &
   compiler_options
#endif
 use debug, only: &
   debug_level,&
   debug_constitutive,&
   debug_levelBasic
 use IO, only: &
   IO_timeStamp
 use material, only: &
   phase_kinematics, &
   KINEMATICS_thermal_expansion_label, &
   KINEMATICS_thermal_expansion_ID
 use config, only: &
   config_phase

 implicit none
 integer(pInt) :: &
   Ninstance, &
   p
 
 write(6,'(/,a)')   ' <<<+-  kinematics_'//KINEMATICS_thermal_expansion_LABEL//' init  -+>>>'
 write(6,'(a15,a)') ' Current time: ',IO_timeStamp()
#include "compilation_info.f90"

 Ninstance = int(count(phase_kinematics == KINEMATICS_thermal_expansion_ID),pInt)
 if (Ninstance == 0_pInt) return
 
 if (iand(debug_level(debug_constitutive),debug_levelBasic) /= 0_pInt) &
   write(6,'(a16,1x,i5,/)') '# instances:',Ninstance

 do p = 1_pInt, size(phase_kinematics)
   if (all(phase_kinematics(:,p) /= KINEMATICS_thermal_expansion_ID)) cycle
 enddo

end subroutine kinematics_thermal_expansion_init

!--------------------------------------------------------------------------------------------------
!> @brief  report initial thermal strain based on current temperature deviation from reference
!--------------------------------------------------------------------------------------------------
pure function kinematics_thermal_expansion_initialStrain(homog,phase,offset)
 use material, only: &
   temperature
 use lattice, only: &
   lattice_thermalExpansion33, &
   lattice_referenceTemperature
 
 implicit none
 integer(pInt), intent(in) :: &
   phase, &
   homog, offset
 real(pReal), dimension(3,3) :: &
   kinematics_thermal_expansion_initialStrain                                                       !< initial thermal strain (should be small strain, though)

 
 kinematics_thermal_expansion_initialStrain = &
   (temperature(homog)%p(offset) - lattice_referenceTemperature(phase))**1 / 1. * &
   lattice_thermalExpansion33(1:3,1:3,1,phase) + &                                                  ! constant  coefficient
   (temperature(homog)%p(offset) - lattice_referenceTemperature(phase))**2 / 2. * &
   lattice_thermalExpansion33(1:3,1:3,2,phase) + &                                                  ! linear    coefficient
   (temperature(homog)%p(offset) - lattice_referenceTemperature(phase))**3 / 3. * &
   lattice_thermalExpansion33(1:3,1:3,3,phase)                                                      ! quadratic coefficient
  
end function kinematics_thermal_expansion_initialStrain

!--------------------------------------------------------------------------------------------------
!> @brief  contains the constitutive equation for calculating the velocity gradient  
!--------------------------------------------------------------------------------------------------
subroutine kinematics_thermal_expansion_LiAndItsTangent(Li, dLi_dTstar, ipc, ip, el)
 use material, only: &
   material_phase, &
   material_homog, &
   temperature, &
   temperatureRate, &
   thermalMapping
 use lattice, only: &
   lattice_thermalExpansion33, &
   lattice_referenceTemperature
 
 implicit none
 integer(pInt), intent(in) :: &
   ipc, &                                                                                           !< grain number
   ip, &                                                                                            !< integration point number
   el                                                                                               !< element number
 real(pReal),   intent(out), dimension(3,3) :: &
   Li                                                                                               !< thermal velocity gradient
 real(pReal),   intent(out), dimension(3,3,3,3) :: &
   dLi_dTstar                                                                                       !< derivative of Li with respect to Tstar (4th-order tensor defined to be zero)
 integer(pInt) :: &
   phase, &
   homog, offset
 real(pReal) :: &
   T, TRef, TDot  
   
 phase = material_phase(ipc,ip,el)
 homog = material_homog(ip,el)
 offset = thermalMapping(homog)%p(ip,el)
 T = temperature(homog)%p(offset)
 TDot = temperatureRate(homog)%p(offset)
 TRef = lattice_referenceTemperature(phase)
 
 Li = TDot * ( &
               lattice_thermalExpansion33(1:3,1:3,1,phase)*(T - TRef)**0 &                           ! constant  coefficient
             + lattice_thermalExpansion33(1:3,1:3,2,phase)*(T - TRef)**1 &                           ! linear    coefficient
             + lattice_thermalExpansion33(1:3,1:3,3,phase)*(T - TRef)**2 &                           ! quadratic coefficient
             ) / &
      (1.0_pReal &
            + lattice_thermalExpansion33(1:3,1:3,1,phase)*(T - TRef)**1 / 1. &
            + lattice_thermalExpansion33(1:3,1:3,2,phase)*(T - TRef)**2 / 2. &
            + lattice_thermalExpansion33(1:3,1:3,3,phase)*(T - TRef)**3 / 3. &
      )
 dLi_dTstar = 0.0_pReal 
  
end subroutine kinematics_thermal_expansion_LiAndItsTangent

end module kinematics_thermal_expansion
