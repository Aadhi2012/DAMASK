########################################################################################
# CMAKE for build the Material subroutine for BVP solution
########################################################################################
cmake_minimum_required (VERSION 2.8.8 FATAL_ERROR)

#---------------------------------------------------------------------------------------
# Find PETSc from system environment
set(PETSC_DIR $ENV{PETSC_DIR})
if ("${PETSC_DIR}" STREQUAL "")
  message (FATAL_ERROR "PETSC_DIR is not defined in system!")
endif ("${PETSC_DIR}" STREQUAL "")

# BRUTAL FORCE TO FIND THE VARIABLES DEFINED IN PETSC
# https://github.com/jedbrown/cmake-modules/blob/master/FindPETSc.cmake
exec_program(mktemp ARGS -d OUTPUT_VARIABLE PETSC_TEMP)

set(petsc_conf_variables "${PETSC_DIR}/lib/petsc/conf/variables")
set(petsc_conf_rules     "${PETSC_DIR}/lib/petsc/conf/rules"    )
# Generate a temporary makefile to probe the PETSc configuration
# This file will be deleted once the setting from PETSc is parsed
# into CMake
set (petsc_config_makefile "${PETSC_TEMP}/Makefile.petsc")

file (WRITE
"${petsc_config_makefile}"
"## This file was auto generated by CMake
# PETSC_DIR  = ${PETSC_DIR}
SHELL = /bin/sh
include ${petsc_conf_rules}
include ${petsc_conf_variables}
INCLUDE_DIRS   := \${PETSC_FC_INCLUDES}
LIBRARIES      := \${PETSC_WITH_EXTERNAL_LIB}
COMPILERF      := \${FC}
COMPILERC      := \${CC}
LINKERNAME     := \${FLINKER}
includes:
\t@echo \${INCLUDE_DIRS}
extlibs:
\t@echo \${LIBRARIES}
compilerf:
\t@echo \${COMPILERF}
compilerc:
\t@echo \${COMPILERC}
linker:
\t@echo \${LINKERNAME}
")

# CMake will execute each target in the ${petsc_config_makefile}
# to acquire corresponding PETSc Variables.
# The include path and linking libraries in PETSc usually contains
# duplicated entries, which is cleaned up later using CMake list.
find_program (MAKE_EXECUTABLE NAMES make gmake)
# Find the PETSc includes directory settings
execute_process(COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} "includes"
                RESULT_VARIABLE PETSC_INCLUDES_RETURN
                OUTPUT_VARIABLE petsc_includes
                OUTPUT_STRIP_TRAILING_WHITESPACE)
# Find the PETSc external linking directory settings
# //required for final linking, must be appended after the executable
execute_process(COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} "extlibs"
                RESULT_VARIABLE PETSC_EXTERNAL_LIB_RETURN
                OUTPUT_VARIABLE petsc_external_lib
                OUTPUT_STRIP_TRAILING_WHITESPACE)
# PETSc specified fortran compiler
execute_process(COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} "compilerf"
                RESULT_VARIABLE PETSC_MPIFC_RETURN
                OUTPUT_VARIABLE PETSC_MPIFC
                OUTPUT_STRIP_TRAILING_WHITESPACE)
# PETSc specified C compiler
execute_process(COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} "compilerc"
                RESULT_VARIABLE PETSC_MPICC_RETURN
                OUTPUT_VARIABLE PETSC_MPICC
                OUTPUT_STRIP_TRAILING_WHITESPACE)
# PETSc specified linker (MPIF90 + PETSc linking flags)
execute_process(COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} "linker"
                RESULT_VARIABLE PETSC_LINKER_RETURN
                OUTPUT_VARIABLE PETSC_LINKER
                OUTPUT_STRIP_TRAILING_WHITESPACE)
# Remove temporary makefile, no need to keep it anymore.
file (REMOVE_RECURSE ${PETSC_TEMP})

# REMOVE DUPLICATE FLAGS FOR COMPILER AND LINKING
string( REGEX MATCHALL "-I([^\" ]+)" TMP_LIST "${petsc_includes}")
list(REMOVE_DUPLICATES TMP_LIST)
foreach (dir ${TMP_LIST})
    set(PETSC_INCLUDES "${PETSC_INCLUDES} ${dir}")
endforeach(dir)
string( REGEX MATCHALL "-[lLW]([^\" ]+)" TMP_LIST "${petsc_external_lib}")
list(REMOVE_DUPLICATES TMP_LIST)
foreach (exlib ${TMP_LIST})
    set(PETSC_EXTERNAL_LIB "${PETSC_EXTERNAL_LIB} ${exlib}")
endforeach(exlib)

message("***Found PETSC_DIR:\n${PETSC_DIR}\n"                  )
message("***Found PETSC_INCLUDES:\n${PETSC_INCLUDES}\n"        )
message("***Found PETSC_EXTERNAL_LIB:\n${PETSC_EXTERNAL_LIB}\n")
message("***Found PETSC_LINKER:\n${PETSC_LINKER}\n"            )
message("***Found MPI FORTRAN COMPILER:\n${PETSC_MPIFC}\n"     )
message("***Found MPI C COMPILER:\n${PETSC_MPICC}\n"           )

#---------------------------------------------------------------------------------------
# Now start to care about DAMASK

# DAMASK Solver selection
if ("${DAMASK_SOLVER}" STREQUAL "SPECTRAL")
    project(DAMASK_spectral Fortran C)
    add_definitions(-DSpectral)
    message("***Configuring Spectral Solver\n")
elseif ("${DAMASK_SOLVER}" STREQUAL "FEM")
    project(DAMASK_FEM Fortran C)
    add_definitions(-DFEM)
    message("***Configuring FEM Solver\n")
endif()

# set compiler and linker commands (need to be done after defining the project)
# https://cmake.org/Wiki/CMake_FAQ#How_do_I_use_a_different_compiler.3F
set(CMAKE_Fortran_COMPILER "${PETSC_MPIFC}")
set(CMAKE_C_COMPILER       "${PETSC_MPICC}")
set(CMAKE_LINKER           "${PETSC_LINKER}")

# Built-in options for DAMASK build system
#   -> can be overwritten from commandline/install_script
option(OPENMP             "Use OpenMP libaries for DAMASK"                              ON   )
option(OPTIMIZATION       "DAMASK optimization level [OFF,DEFENSIVE,AGGRESSIVE]" "DEFENSIVE" )

# Setting installation prefix
if (DEFINED DAMASK_INSTALL)
    set (CMAKE_INSTALL_PREFIX "${DAMASK_INSTALL}")
else(DEFINED DAMASK_INSTALL)
    set (CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}/bin")
endif(DEFINED DAMASK_INSTALL)
message("\n***The binary will be installed at\n${CMAKE_INSTALL_PREFIX}\n")

# Find DAMASK version (DAMASK_V) in DAMASK_ROOT
find_program (CAT_EXECUTABLE NAMES cat)
execute_process(COMMAND ${CAT_EXECUTABLE} ${PROJECT_SOURCE_DIR}/VERSION
                RESULT_VARIABLE DAMASK_VERSION_RETURN
                OUTPUT_VARIABLE DAMASK_V
                OUTPUT_STRIP_TRAILING_WHITESPACE)
add_definitions(-DDAMASKVERSION="${DAMASK_V}")

# definition of other macros
add_definitions(-DPETSc)
add_definitions(-DFLOAT=8)
add_definitions(-DINT=4)

set (DAMASK_INCLUDE_FLAGS "${DAMASK_INCLUDE_FLAGS} ${PETSC_INCLUDES}"          )
set (DAMASK_INCLUDE_FLAGS "${DAMASK_INCLUDE_FLAGS} -I${PROJECT_SOURCE_DIR}/lib")

###################################################################################################
# Intel Compiler
###################################################################################################
if(${CMAKE_Fortran_COMPILER_ID} STREQUAL "Intel")

  if (OPENMP)
    set (OPENMP_FLAGS "-openmp -openmp-report0 -parallel")
  endif(OPENMP)

  if ("${OPTIMIZATION}" STREQUAL "OFF")
      set (OPTIMIZATION_FLAGS    "-O0 -no-ip")
  elseif("${OPTIMIZATION}" STREQUAL "DEFENSIVE")
      set (OPTIMIZATION_FLAGS    "-O2")
  elseif ("${OPTIMIZATION}" STREQUAL "AGGRESSIVE")
      set (OPTIMIZATION_FLAGS    "-ipo -O3 -no-prec-div -fp-model fast=2 -xHost"  )  #-fast = -ipo, -O3, -no-prec-div, -static, -fp-model fast=2, and -xHost"
  endif()

  set (STANDARD_CHECK "-stand f08 -standard-semantics")
  set (LINKER_FLAGS   "-shared-intel")

#------------------------------------------------------------------------------------------------
# COMPILE SWITCHES
#  -assume byterecl          record length is given in bytes (also set by -standard-semantics)
#          fpe_summary       print list of floating point exceptions occured during execution
#  -fimplicit-none:          assume "implicit-none" even if not present in source
#  -diag-disable:            disables warnings, where
#     warning ID 5268:       the text exceeds right hand column allowed on the line (we have only comments there)
#  -warn:                    enables warnings, where
#     declarations:            any undeclared names (alternative name: -implicitnone)
#     general:                 warning messages and informational messages are issued by the compiler
#     usage:                   questionable programming practices
#     interfaces:              checks the interfaces of all SUBROUTINEs called and FUNCTIONs invoked in your compilation against an external set of interface blocks
#     ignore_loc:              %LOC is stripped from an actual argument
#     alignments:              data that is not naturally aligned
#     unused:                  declared variables that are never used
#     stderrors:               warnings about Fortran standard violations are changed to errors (STANDARD_CHECK)
#

  set (COMPILE_FLAGS "${COMPILE_FLAGS} -fpp"                        )#  preprocessor
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -ftz"                        )# flush unterflow to zero, automatically set if O<0,1,2,3> >0
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -assume byterecl,fpe_summary")
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -diag-disable 5268"          )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn declarations"          )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn general"               )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn usage"                 )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn interfaces"            )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn ignore_loc"            )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn alignments"            )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -warn unused"                )
# MORE OPTIONS FOR DEBUGGING DURING COMPILATION
#  -warn:                    enables warnings, where
#     truncated_source:        Determines whether warnings occur when source exceeds the maximum column width in fixed-format files. (too many warnings because we have comments beyond character 132)
#     uncalled:                Determines whether warnings occur when a statement function is never called
#     all:
#  -name as_is: case sensitive Fortran!

#------------------------------------------------------------------------------------------------
# COMPILE SWITCHES FOR RUNTIME DEBUGGING
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -g"                                                     )# Generate symbolic debugging information in the object file
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -traceback"                                             )# Generate extra information in the object file to provide source file traceback information when a severe error occurs at run time.
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -gen-interfaces"                                        )# Generate an interface block for each routine. http://software.intel.com/en-us/blogs/2012/01/05/doctor-fortran-gets-explicit-again/
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fp-stack-check"                                        )# Generate extra code after every function call to ensure that the floating-point (FP) stack is in the expected state.
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fp-model strict"                                       )# Trap uninitalized variables
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -check bounds,format,output_conversion,pointers,uninit" )# Checks at runtime, where
                                                                                            #  bounds:            if an array index is too small (<1) or too large!
                                                                                            #  format:            for the data type of an item being formatted for output.
                                                                                            #  output_conversion: for the fit of data items within a designated format descriptor field.
                                                                                            #  pointers:          for certain disassociated or uninitialized pointers or unallocated allocatable objects.
                                                                                            #  uninit:            for uninitialized variables.
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -ftrapuv"                                               )
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fpe-all0"                                              )# Capture all floating-point exceptions, sets -ftz automatically
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -warn errors,stderrors"                                 )# Configures warnings, where
                                                                                            #  errors:            warnings are changed to errors
                                                                                            #  stderrors:         warnings about Fortran standard violations are changed to errors
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -debug-parameters all"                                  )
# MORE OPTIONS FOR RUNTIME DEBUGGING
# -heap-arrays:            Should not be done for OpenMP, but set "ulimit -s unlimited" on shell. Probably it helps also to unlimit other limits
# -check:                  Checks at runtime, where
#    arg_temp_created:        will cause a lot of warnings because we create a bunch of temporary arrays (performance?)
#    stack:

#------------------------------------------------------------------------------------------------
# PRECISION SETTINGS
#-real-size 32:               set precision to one of those 32/64/128 (= 4/8/16 bytes) for standard real (=8 for pReal)
#-integer-size 16:            set precision to one of those 16/32/64 (= 2/4/8 bytes) for standard integer (=4 for pInt)
  set (PRECISION_FLAGS "-real-size 64 -integer-size 32")


###################################################################################################
# GNU Compiler
###################################################################################################
elseif(${CMAKE_Fortran_COMPILER_ID} STREQUAL "GNU")

  if (OPENMP)
    set (OPENMP_FLAGS "-fopenmp")
  endif()

  if ("${OPTIMIZATION}" STREQUAL "OFF")
      set (OPTIMIZATION_FLAGS "-O0"       )
  elseif ("${OPTIMIZATION}" STREQUAL "DEFENSIVE")
      set (OPTIMIZATION_FLAGS "-O2")
  elseif ("${OPTIMIZATION}" STREQUAL "AGGRESSIVE")
      set (OPTIMIZATION_FLAGS "-O3 -ffast-math -funroll-loops -ftree-vectorize")
  endif()

  set (STANDARD_CHECK "-std=f2008ts -pedantic-errors" )
  set (LINKER_FLAGS   "-Wl,-undefined,dynamic_lookup" )# ensure to link against dynamic libraries

#------------------------------------------------------------------------------------------------
# COMPILE SWITCHES
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -xf95-cpp-input"             )# preprocessor
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -ffree-line-length-132"      )# restrict line length to the standard 132 characters (lattice.f90 require larger)
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -fimplicit-none"             )# assume "implicit-none" even if not present in source
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -fmodule-private"            )# assume "private" even if not present in source
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wall"                       )
# -Wall:                        sets the following Fortran options:
#   -Waliasing:                   warn about possible aliasing of dummy arguments. Specifically, it warns if the same actual argument is associated with a dummy argument with "INTENT(IN)" and a dummy argument with "INTENT(OUT)" in a call with an explicit interface.
#   -Wampersand:                  checks if a character expression is continued proberly by an ampersand at the end of the line and at the beginning of the new line
#   -Warray-bounds:               checks if array reference is out of bounds at compile time. use -fcheck-bounds to also check during runtime
#   -Wconversion:                 warn about implicit conversions between different type
#   -Wsurprising:                 warn when "suspicious" code constructs are encountered. While technically legal these usually indicate that an error has been made.
#   -Wc-binding-type:
#   -Wintrinsics-std:             only standard intrisics are available, e.g. "call flush(6)" will cause an error
#   -Wno-tabs:                    do not allow tabs in source
#   -Wintrinsic-shadow:           warn if a user-defined procedure or module procedure has the same name as an intrinsic
#   -Wline-truncation:
#   -Wtarget-lifetime:
#   -Wreal-q-constant:            warn about real-literal-constants with 'q'  exponent-letter
#   -Wunused:                     a number of unused-xxx warnings
#  these are general (non -Fortran options) implied by -Wall
#   -Waddress
#   -Warray-bounds (only with -O2)
#   -Wc++11-compat
#   -Wchar-subscripts
#   -Wcomment
#   -Wformat
#   -Wmaybe-uninitialized
#   -Wnonnull
#   -Wparentheses
#   -Wpointer-sign
#   -Wreorder
#   -Wreturn-type
#   -Wsequence-point
#   -Wstrict-aliasing
#   -Wstrict-overflow=1
#   -Wswitch
#   -Wtrigraphs
#   -Wuninitialized
#   -Wunknown-pragmas
#   -Wunused-function
#   -Wunused-label
#   -Wunused-value
#   -Wunused-variable
#   -Wvolatile-register-var
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wextra"                     )
# -Wextra:                      sets the following Fortran options:
#   -Wunuses-parameter:
#   -Wcompare-reals:
#  these are general (non -Fortran options) implied by -Wextra
#   -Wclobbered
#   -Wempty-body
#   -Wignored-qualifiers
#   -Wmissing-field-initializers
#   -Woverride-init
#   -Wsign-compare
#   -Wtype-limits
#   -Wuninitialized
#   -Wunused-but-set-parameter (only with -Wunused or -Wall)
#   -Wno-globals
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wcharacter-truncation"      )# warn if character expressions (strings) are truncated
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wunderflow"                 )# produce a warning when numerical constant expressions are encountered, which yield an UNDERFLOW during compilation
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wsuggest-attribute=pure"    )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wsuggest-attribute=noreturn")
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wconversion-extra"          )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wimplicit-procedure"        )
  set (COMPILE_FLAGS "${COMPILE_FLAGS} -Wno-unused-parameter"       )
# MORE OPTIONS FOR DEBUGGING DURING COMPILATION
# -Warray-temporarieswarnings:   because we have many temporary arrays (performance issue?):
# -Wimplicit-interface:          no interfaces for lapack routines
# -Wunsafe-loop-optimizations:   warn if the loop cannot be optimized due to nontrivial assumptions.
# -ffpe-summary:                 print summary of floating point exeptions (‘invalid’, ‘zero’, ‘overflow’, ‘underflow’, ‘inexact’ and ‘denormal’)
# -ffpe-summary=all:             only for newer gfortran


#------------------------------------------------------------------------------------------------
# COMPILE SWITCHES FOR RUNTIME DEBUGGING
# -ffpe-trap=invalid,\         stop execution if floating point exception is detected (NaN is silent)
#            zero,\
#            overflow
# -fcheck=all:                   sets the following Fortran options:
# array-temps
# bounds
# do
# mem
# pointer
# recursion
#
# MORE OPTIONS FOR RUNTIME DEBUGGING
# -ffpe-trap=precision,
#            denormal,
#            underflow
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -g"                              )
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fbacktrace"                     )
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fdump-core"                     )
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -fcheck=all"                     )
  set (DEBUG_FLAGS "${DEBUG_FLAGS} -ffpe-trap=invalid,zero,overflow")

#------------------------------------------------------------------------------------------------
# PRECISION SETTINGS
#-fdefault-real-8:            set precision to 8 bytes for standard real (=8 for pReal). Will set size of double to 16 bytes as long as -fdefault-double-8 is not set
#-fdefault-double-8:          set precision to 8 bytes for double real, would be 16 bytes because -fdefault-real-8 is used
#-fdefault-integer-8:         Use it to set precision to 8 bytes for integer, don't use it for the standard case of pInt=4 (there is no -fdefault-integer-4)
  set (PRECISION_FLAGS "-fdefault-real-8 -fdefault-double-8")
endif()

set (CMAKE_Fortran_FLAGS            "${BUILDCMD_PRE} ${OPENMP_FLAGS} ${STANDARD_CHECK} ${OPTIMIZATION_FLAGS} ${COMPILE_FLAGS} ${PRECISION_FLAGS}")
set (CMAKE_Fortran_LINK_EXECUTABLE  "${BUILDCMD_PRE} ${CMAKE_LINKER} ${OPENMP_FLAGS}   ${OPTIMIZATION_FLAGS} ${LINKER_FLAGS}")

if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "RELEASE")
  set (CMAKE_Fortran_FLAGS            "${CMAKE_Fortran_FLAGS} ${DEBUG_FLAGS}")
  set (CMAKE_Fortran_LINK_EXECUTABLE  "${CMAKE_Fortran_LINK_EXECUTABLE} ${DEBUG_FLAGS}")
endif()


set (CMAKE_Fortran_LINK_EXECUTABLE "${CMAKE_Fortran_LINK_EXECUTABLE} <OBJECTS> -o <TARGET> <LINK_LIBRARIES> ${PETSC_EXTERNAL_LIB} ${BUILDCMD_POST}")
set (CMAKE_Fortran_FLAGS  "${CMAKE_Fortran_FLAGS} ${DAMASK_INCLUDE_FLAGS} ${BUILDCMD_POST}")

message("***COMPILE FLAGS:\n${CMAKE_Fortran_FLAGS}\n")
message("***LINKER:\n${CMAKE_Fortran_LINK_EXECUTABLE}\n")

# MOVE to SOURCE DIRECTORY for BUILDING
add_subdirectory(src)

# INSTALL BUILT BINARIES
if ("${PROJECT_NAME}" STREQUAL "DAMASK_spectral")
    INSTALL(PROGRAMS    ${PROJECT_BINARY_DIR}/src/DAMASK_spectral
            DESTINATION ${CMAKE_INSTALL_PREFIX})
elseif ("${PROJECT_NAME}" STREQUAL "DAMASK_FEM")
    INSTALL(PROGRAMS    ${PROJECT_BINARY_DIR}/src/DAMASK_FEM
            DESTINATION ${CMAKE_INSTALL_PREFIX})
endif("${PROJECT_NAME}" STREQUAL "DAMASK_spectral")
