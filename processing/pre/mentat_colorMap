#!/usr/bin/env python 


import sys, os
from colorsys import *
from optparse import OptionParser

releases = ['2010','2008r1','2007r1','2005r3']

for release in releases:
  libPath = '/msc/mentat%s/shlib/'%release
  if os.path.exists(libPath):
    sys.path.append(libPath)
    for subdir in [os.path.join(libPath,file)
                        for file in os.listdir(libPath)
                        if os.path.isdir(os.path.join(libPath,file))]:
      sys.path.append(subdir)
    break
from py_mentat import *



# -----------------------------
def outMentat(cmd,locals):
    if cmd[0:3] == '(!)':
        exec(cmd[3:])
    elif cmd[0:3] == '(?)':
        cmd = eval(cmd[3:])
        py_send(cmd)
    else:
        py_send(cmd)
    return



# -----------------------------
def outStdout(cmd,locals):
    if cmd[0:3] == '(!)':
        exec(cmd[3:])
    elif cmd[0:3] == '(?)':
        cmd = eval(cmd[3:])
        print cmd
    else:
        print cmd
    return



# -----------------------------
def output(cmds,locals,dest):
    for cmd in cmds:
        if isinstance(cmd,list):
            output(cmd,locals,dest)
        else:
            {\
            'Mentat': outMentat,\
            'Stdout': outStdout,\
            }[dest](cmd,locals)
    return



# -----------------------------
def lever(val0, val1, x):
    return val0 + (val1 - val0) * x



# -----------------------------
def symlever(comp, val0, val1, x):
    if comp == "hue":
        return lever(val0, val1, x)

    if comp == "lightness":
        val_middle = max(0.9, val0, val1)
    elif comp == "saturation":
        val_middle = min(0.1, val0, val1)
    if x < 0.5:
        return lever(val0, val_middle, 2*x)
    else:
        return lever(val_middle, val1, 2*x-1)
        
        

# -----------------------------
def colorMap(colors):
    cmds = [ "*color %i %f %f %f"%(idx+32,color[0],color[1],color[2]) 
             for idx,color in enumerate(colors) ]    
    return cmds
    

# -----------------------------
# MAIN FUNCTION STARTS HERE
# -----------------------------

parser = OptionParser(usage="%prog [options] lower_hls upper_hls", description = """
Changes the color map in mentat. 

Interpolates colors between "lower_hls" and "upper_hls". 
For symmetric scales use option "-s". 

Example colors:
- Non-symmetric scales: 0.167,0.9,0.1  0.167,0.1,0.9
- Symmetric scales: 0,0.2,0.9  0.333,0.2,0.9
""")

parser.add_option("-s","--symmetric", action = "store_true", 
                  dest = "symmetric", \
                  help = "symmetric legend [%default]")
parser.add_option("-p", "--port", type = "int",\
                  dest = "port",\
                  help = "Mentat connection port [%default]")
parser.add_option("-v", "--verbose", action="store_true",\
                  dest = "verbose",\
                  help = "write Mentat command stream also to stdout [%default]")
parser.set_defaults(symmetric = False)
parser.set_defaults(port=40007)
parser.set_defaults(verbose=False)


(options, vars) = parser.parse_args()



### read hlsColors and check if they are valid hls values

try:
    hlsColor_bounds = [[],[]]
    for i in range(2):
        hlsColor_bounds[i] = map(float, vars[i].split(","))
        
        if len(hlsColor_bounds[i]) <> 3: 
            raise
        
        hlsColors_limits = [[0,0,0],[1,1,1]]
        for j in range(3):
            if hlsColor_bounds[i][j] < hlsColors_limits[0][j] or hlsColor_bounds[i][j] > hlsColors_limits[1][j]:
                raise

except:
    parser.error("give lower and upper hlsColor as comma separated values")



### interpolate hls values

nColors = 32
if options.symmetric:
    hlsColors = [ [ symlever(comp, hlsColor_bounds[0][j], hlsColor_bounds[1][j], float(idx)/(nColors-1)) 
                    for j,comp in enumerate(["hue","lightness","saturation"]) ]
                  for idx in range(nColors) ]
else:
    hlsColors = [ [ lever(hlsColor_bounds[0][j], hlsColor_bounds[1][j], float(idx)/(nColors-1)) 
                    for j,comp in enumerate(["hue","lightness","saturation"]) ]
                  for idx in range(nColors) ]



### convert to rgb values

rgbColors = [ hls_to_rgb(hlsColor[0], hlsColor[1], hlsColor[2]) 
              for hlsColor in hlsColors ]



### connect to mentat and change colorMap

outputLocals = {}
print 'waiting to connect...'
py_connect('',options.port)
print 'connected...'

cmds = colorMap(rgbColors)
output(cmds,outputLocals,'Mentat')
py_disconnect()

if options.verbose:
  output(cmds,outputLocals,'Stdout')
  
  