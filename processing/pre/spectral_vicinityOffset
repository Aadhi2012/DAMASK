#!/usr/bin/env python
# -*- coding: UTF-8 no BOM -*-

import os,sys,string,re,math,numpy
from optparse import OptionParser, OptionGroup, Option, SUPPRESS_HELP


# -----------------------------
class extendedOption(Option):
# -----------------------------
# used for definition of new option parser action 'extend', which enables to take multiple option arguments
# taken from online tutorial http://docs.python.org/library/optparse.html
    
    ACTIONS = Option.ACTIONS + ("extend",)
    STORE_ACTIONS = Option.STORE_ACTIONS + ("extend",)
    TYPED_ACTIONS = Option.TYPED_ACTIONS + ("extend",)
    ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + ("extend",)

    def take_action(self, action, dest, opt, value, values, parser):
        if action == "extend":
            lvalue = value.split(",")
            values.ensure_value(dest, []).extend(lvalue)
        else:
            Option.take_action(self, action, dest, opt, value, values, parser)


# ----------------------- MAIN -------------------------------

identifiers = {
        'resolution': ['a','b','c'],
        'dimension':  ['x','y','z'],
          }
mappings = {
        'resolution': lambda x: int(x),
        'dimension':  lambda x: float(x),
          }


parser = OptionParser(option_class=extendedOption, usage='%prog options [file[s]]', description = """
Offset microstructure index for points which see a microstructure different from themselves within a given (cubic) vicinity,
i.e. within the region close to a grain/phase boundary.
""" + string.replace('$Id: spectral_geomCheck 994 2011-09-05 13:38:10Z MPIE\p.eisenlohr $','\n','\\n')
)

parser.add_option('-v', '--vicinity', dest='vicinity', type='int', \
                  help='voxel distance checked for presence of other microstructure')
parser.add_option('-o', '--offset', dest='offset', type='int', \
                  help='integer offset for tagged microstructure')

parser.set_defaults(vicinity = 1)

(options, filenames) = parser.parse_args()

# ------------------------------------------ setup file handles ---------------------------------------  

files = []
if filenames == []:
  files.append({'name':'STDIN', 'input':sys.stdin, 'output':sys.stdout})
else:
  for name in filenames:
    if os.path.exists(name):
      files.append({'name':name, 'input':open(name), 'output':open(name+'_tmp','w')})

# ------------------------------------------ loop over input files ---------------------------------------  

for file in files:
  if file['name'] != 'STDIN': print file['name']

  #  get labels by either read the first row, or - if keyword header is present - the last line of the header

  firstline = file['input'].readline()
  m = re.search('(\d+)\s*head', firstline.lower())
  if m:
    headerlines = int(m.group(1))
    headers  = [firstline]+[file['input'].readline() for i in range(headerlines)]
  else:
    headerlines = 1
    headers = firstline

  content = file['input'].readlines()
  file['input'].close()

  resolution = [0,0,0]
  dimension = [0.0,0.0,0.0]
  for header in headers:
    headitems = header.split()
    if headitems[0] == 'resolution':         # located resolution entry
      for i in xrange(3):
        resolution[i] = mappings['resolution'](headitems[headitems.index(identifiers['resolution'][i])+1])
    if headitems[0] == 'dimension':          # located dimension entry
      for i in xrange(3):
        dimension[i] = mappings['dimension'](headitems[headitems.index(identifiers['dimension'][i])+1])

  if resolution == [0,0,0]:
    print 'no resolution info found.'
    sys.exit(1)
  if dimension == [0.0,0.0,0.0]:
    print 'no dimension info found.'
    sys.exit(1)

  if file['name'] != 'STDIN':
    print 'resolution: %s'%(' x '.join(map(str,resolution)))
    print 'dimension:  %s'%(' x '.join(map(str,dimension)))
    
  microstructure = numpy.zeros(resolution,'i')
  i = 0
  for line in content:  
    for item in map(int,line.split()):
      microstructure[i%resolution[0],(i/resolution[0])%resolution[1],i/resolution[0]/resolution[1]] = item
      i += 1
  
  formatwidth = int(math.floor(math.log10(microstructure.max())))
  
  for x in xrange(resolution[0]):
    for y in xrange(resolution[1]):
      for z in xrange(resolution[2]):

        me = microstructure[x,y,z]
        breaker = False
        
        for dx in xrange(-options.vicinity,options.vicinity+1):
          for dy in xrange(-options.vicinity,options.vicinity+1):
            for dz in xrange(-options.vicinity,options.vicinity+1):

              they = microstructure[(x+dx)%resolution[0],(y+dy)%resolution[1],(z+dz)%resolution[2]]
              if they != me and they != me+options.offset:                    # located alien microstructure in vicinity
                microstructure[x,y,z] += options.offset                       # tag myself as close to aliens!
                breaker = True
                break

            if breaker: break

          if breaker: break

            
# ------------------------------------------ assemble header ---------------------------------------  

  output = ''.join(headers)

# ------------------------------------- regenerate texture information ----------------------------------  

  for z in xrange(resolution[2]):
    for y in xrange(resolution[2]):
      output += ' '.join(map(lambda x: ('%%%ii'%formatwidth)%x, microstructure[:,y,z])) + '\n'
    
    output += '\n'
    
# ------------------------------------------ output result ---------------------------------------  

  file['output'].write(output)

  if file['name'] != 'STDIN':
    file['output'].close
    os.rename(file['name']+'_tmp',file['name'])
